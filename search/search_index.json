{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to my personal documentation site, a curated collection of notes, guides, and insights that I have found valuable. It is my hope that you will find these resources equally beneficial.  </p> <p>Please note that this site is a continuous work in progress, with new content regularly added and existing content frequently updated. The information provided is based on my personal experiences and perspectives, which may not align with every individual's circumstances. Your feedback and suggestions are always welcome, and I encourage you to share your thoughts.  </p>"},{"location":"#projects","title":"Projects","text":"<p>Each year, I will undertake a series of projects with defined deadlines. This site serves as a platform to document my progress, share insights, and reflect on the outcomes of these endeavors. If you are interested in collaborating on a project or have a project idea, please feel free to reach out on Discord.</p> <p>Upon completion, projects will be archived for future reference, so be sure to explore the archive section for a record of past work.  </p>"},{"location":"#blog","title":"Blog","text":"<p>The blog section features a variety of posts on topics that capture my interest. These include tutorials, guides, opinion pieces, and other content that I hope will provide value and inspiration.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/","title":"Transferring Files Between WSL and Windows","text":"","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#transferring-files-between-wsl-and-windows","title":"Transferring Files Between WSL and Windows","text":"<p>This guide provides a step-by-step approach to transferring files between Windows Subsystem for Linux (WSL) and Windows using tools like SCP (Secure Copy). It includes commands for file management and efficient navigation in both environments.</p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#logging-into-zomro-vps-using-wsl-in-ubuntu-cli","title":"Logging into Zomro VPS using WSL in Ubuntu CLI","text":"<p>To access your Zomro VPS using WSL\u2019s Ubuntu terminal:</p> <ol> <li>Open the Ubuntu terminal via the Windows Start menu.</li> <li>Use the <code>ssh</code> command to connect to your VPS:</li> </ol> <p><code>ssh your_username@your_server_ip</code></p> <p>Replace <code>your_username</code> with your VPS username and <code>your_server_ip</code> with the server\u2019s IP address.</p> <ol> <li>Enter your VPS password when prompted. After logging in, you can manage your VPS from the Ubuntu CLI.</li> </ol>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#locating-file-paths-in-ubuntu-cli","title":"Locating File Paths in Ubuntu CLI","text":"<p>Navigating and identifying file paths in Ubuntu is essential for transferring files. Use these commands for efficient file management:</p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#1-present-working-directory-pwd","title":"1. Present Working Directory (<code>pwd</code>)","text":"<p>Displays the absolute path of the current directory:</p> <p><code>pwd</code></p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#2-list-directory-contents-ls","title":"2. List Directory Contents (<code>ls</code>)","text":"<p>Shows files and directories in the current location:</p> <p><code>ls</code></p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#3-find-a-file-find","title":"3. Find a File (<code>find</code>)","text":"<p>Searches for a file in the system:</p> <p><code>find / -name example.txt</code></p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#4-change-directory-cd","title":"4. Change Directory (<code>cd</code>)","text":"<p>Navigates through directories:</p> <p><code>cd /path/to/directory</code></p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#5-access-windows-files","title":"5. Access Windows Files","text":"<p>WSL allows access to Windows files via <code>/mnt</code>. For example:</p> <p><code>cd /mnt/c/Users/YourUsername/Desktop</code></p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#file-transfer-methods-using-scp","title":"File Transfer Methods Using SCP","text":"","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#using-scp-secure-copy","title":"Using SCP (Secure Copy)","text":"<p>The <code>scp</code> command securely copies files between WSL and Windows.</p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#syntax","title":"Syntax","text":"<pre><code>scp username@source:/path/to/source/file /path/to/destination/\n</code></pre>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#example-copy-files-from-wsl-to-windows","title":"Example: Copy Files from WSL to Windows","text":"<p>To copy screenshots from a remote VPS to your Windows Desktop:</p> <pre><code>scp root@45.88.107.136:/root/zomro-selenium-base/screenshots/* \"/mnt/c/Users/Harminder Nijjar/Desktop/\"\n</code></pre> <p>This command transfers all files from the VPS directory to the specified Windows Desktop folder.</p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/21/transferring-files-between-wsl-and-windows/#conclusion","title":"Conclusion","text":"<p>Transferring files between WSL and Windows is simple and efficient using commands like <code>scp</code>. Mastering these techniques will streamline your workflow and enhance your productivity across WSL and Windows environments.</p>","tags":["WSL","Windows","Ubuntu","Linux","File Transfer","SCP","Secure Copy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/","title":"Transferring Script Files to Local System or VPS","text":"","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#transferring-script-files-to-local-system-or-vps","title":"Transferring Script Files to Local System or VPS","text":"<p>This guide explains the process of transferring a Python script for a Facebook Marketplace Scraper and setting it up on either a local system or a VPS. This scraper helps you collect and manage data from online listings efficiently.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#features-of-the-facebook-marketplace-scraper","title":"Features of the Facebook Marketplace Scraper","text":"<ul> <li>Data Storage: Uses SQLite for local storage and integration with Google Sheets for cloud-based storage.</li> <li>Notifications: Optional Telegram Bot integration for updates.</li> <li>Proxy Support: Includes compatibility with services like Smartproxy to manage requests.</li> </ul>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#local-system-setup-process-windows","title":"Local System Setup Process (Windows)","text":"<p>This section outlines the steps to set up the scraper on your local machine.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have:</p> <ul> <li>Python 3.6 or higher installed.</li> <li>Access to Google Cloud with credentials for Google Sheets API.</li> <li>An SQLite-supported system.</li> <li>A Telegram bot token (optional).</li> <li>Dependencies listed in the <code>requirements.txt</code>.</li> </ul>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#setup-steps","title":"Setup Steps","text":"","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-1-obtain-script-files","title":"Step 1: Obtain Script Files","text":"<ul> <li>Download the script files (typically a ZIP archive) and extract them.</li> <li>Ensure the following files are present:</li> <li><code>fb_parser.py</code>: The main script.</li> <li><code>requirements.txt</code>: Python dependencies.</li> </ul>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<p>Open a terminal, navigate to the script folder, and run:</p> <pre><code>pip install -r requirements.txt\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-3-configure-google-sheets-api","title":"Step 3: Configure Google Sheets API","text":"<ol> <li>Create a Google Cloud project and enable the Sheets API.</li> <li>Download the <code>credentials.json</code> file and place it in the script folder.</li> </ol>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-4-initialize-the-database","title":"Step 4: Initialize the Database","text":"<p>Run the following command to create the SQLite database:</p> <pre><code>python fb_parser.py --initdb\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-5-configure-telegram-notifications-optional","title":"Step 5: Configure Telegram Notifications (Optional)","text":"<p>Edit <code>fb_parser.py</code> and add your <code>bot_token</code> and <code>bot_chat_id</code>.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-6-run-the-scraper","title":"Step 6: Run the Scraper","text":"<p>Start the scraper with:</p> <pre><code>python fb_parser.py\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-7-automation-optional","title":"Step 7: Automation (Optional)","text":"<p>Use Task Scheduler to automate script execution.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#vps-setup-process","title":"VPS Setup Process","text":"","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#vps-requirements","title":"VPS Requirements","text":"<ul> <li>VPS with SSH access and Python 3.6+ installed.</li> <li>Linux OS (Ubuntu or CentOS preferred).</li> <li>Necessary script files and dependencies.</li> </ul>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#setup-steps_1","title":"Setup Steps","text":"","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-1-log-in-to-vps","title":"Step 1: Log in to VPS","text":"<p>Access your VPS via SSH:</p> <pre><code>ssh username@hostname\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-2-transfer-script-files","title":"Step 2: Transfer Script Files","text":"<p>Upload files using SCP or SFTP:</p> <pre><code>scp fb_parser.py requirements.txt username@hostname:/path/to/directory\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-3-install-python-and-dependencies","title":"Step 3: Install Python and Dependencies","text":"<p>Update your system and install Python dependencies:</p> <pre><code>sudo apt update\nsudo apt install python3-pip\npip3 install -r requirements.txt\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-4-configure-credentials","title":"Step 4: Configure Credentials","text":"<p>Follow the same steps as the local setup to configure Google Sheets and Telegram credentials.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-5-run-the-scraper","title":"Step 5: Run the Scraper","text":"<p>Navigate to the script directory and execute:</p> <pre><code>python3 fb_parser.py\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#step-6-automate-with-cron","title":"Step 6: Automate with Cron","text":"<p>Use <code>cron</code> to schedule periodic script execution:</p> <pre><code>crontab -e\n# Add the line below to run daily at midnight\n0 0 * * * python3 /path/to/fb_parser.py\n</code></pre>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#conclusion","title":"Conclusion","text":"<p>By following this guide, you can effectively transfer and set up the Facebook Marketplace Scraper on your local system or VPS. This tool simplifies the process of collecting and managing online listing data.</p>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2023/11/27/transferring-script-files-to-local-system-or-vps/#references","title":"References","text":"<ul> <li>Google Sheets API</li> <li>SQLite</li> <li>Telegram Bot API</li> <li>Smartproxy</li> </ul>","tags":["Facebook Marketplace Scraper","Python","SQLite","Google Sheets API","Telegram Bot API","Smartproxy"]},{"location":"blog/2024/11/24/my-first-blog-post/","title":"My First Blog Post","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/","title":"Using Crosshair.AHK to Assist with Aiming on Xbox Cloud Gaming","text":"","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/#using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming","title":"Using Crosshair.AHK to Assist with Aiming on Xbox Cloud Gaming","text":"<p>I recently started playing games on Xbox Cloud Gaming on PC, and I noticed that the aim assist with reWASD wasn't as powerful as I had initially expected. I decided to use Crosshair.AHK to help me aim better. Crosshair.AHK is a simple script that displays a crosshair on your screen to help you aim better in games. In this post, I will show you how to use Crosshair.AHK to assist with aiming in Fortnite on Xbox Cloud Gaming.</p>","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/#features-of-crosshairahk","title":"Features of Crosshair.AHK","text":"<p>Crosshair.AHK has several features that make it a great tool for improving your aim in games. Some of the key features include:</p> <ul> <li>10 different crosshair styles</li> <li>Customizable crosshair colors</li> <li>Fullscreen crosshair support</li> </ul>","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/#crosshair-styles","title":"Crosshair Styles","text":"<p>Crosshair.AHK offers 10 different crosshair styles to choose from, allowing you to find the one that works best for you. The crosshair styles range from simple dots to more complex designs, giving you plenty of options to customize your crosshair to your liking. Crosshair styles can be easily changed by pressing the <code>F10</code> key.</p>","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/#customizable-crosshair-colors","title":"Customizable Crosshair Colors","text":"<p>Crosshair.AHK allows you to customize the color of your crosshair to suit your preferences. You can choose from a wide range of colors to find the one that stands out the most against your game's background. Crosshair colors can be easily changed by pressing the <code>F10</code> key and using the color change widget to select the desired color.</p>","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/24/using-crosshairahk-to-assist-with-aiming-on-xbox-cloud-gaming/#fullscreen-crosshair-support","title":"Fullscreen Crosshair Support","text":"<p>Crosshair.AHK supports fullscreen mode, allowing you to use the crosshair in games that run in fullscreen. This feature is particularly useful for games that don't have built-in crosshairs or where the crosshair is difficult to see against the game's background. To enable fullscreen mode, simply press the <code>F11</code> key.</p>","tags":["Xbox Cloud Gaming","AHK","reWASD","Fortnite","Aim Assist","Aiming","Gaming Tools"]},{"location":"blog/2024/11/25/harminder-singh-nijjars-digital-art-catalog/","title":"Harminder Singh Nijjar's Digital Art Catalog","text":"<p>2024-11-25: While sitting on the dining table drinking a Celsius Peach Vibe, I decided to create a quick digital drawing of the can next to a container of JIF peanut butter. The drawing was done on my MobiScribe WAVE using the stylus that came with the device. The MobiScribe WAVE is a great tool for digital art, and I enjoy using it for quick sketches and drawings. </p> <p>2024-11-26 20:17: Today I drew a quick sketch of two wolf pups howling at the moon. </p>","tags":["Drawing","Digital Art"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/","title":"Agentic Web Scraping in 2024","text":"<p>Web scraping best practices have evolved significantly in the past couple of years, with the rise of agentic web scraping marking a new era in data collection and analysis. In this post, we'll explore the concept of agentic web scraping, its benefits, and how it is transforming the landscape of data-driven decision-making.</p>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/#evolution-of-web-scraping","title":"Evolution of Web Scraping","text":"<p>Typically, web scraping involved extracting data from websites by mimiking browser behaviour through HTTP requests and web automation frameworks like Selenium, Puppeteer, or Playwright. This process required developers to write specific code for each website, making it time-consuming, error-prone, and susceptible to changes in website structure. So much so that 50% to 70% of engineering resources in data aggregation teams were spent on scraping stystems early on. However, with the advent of agentic web scraping, this approach has been revolutionized. LLMs are able to make sense of any data thrown at them, allowing them to understand large amounts of raw HTML and make decisions based on it.</p> <p>This comes with a drawback, however. The more unstructured data you throw at an LLM, the more likely it is to make mistakes and the more tokens are consumed. This is why it's important to have as close to structured, human-readable data as possible.</p>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/#structuring-data-for-agentic-web-scraping","title":"Structuring Data for Agentic Web Scraping","text":"<p>In order to be able to use LLM Scraper Agents and Reasoning Agents, we need to convert raw HTML data into a more structured format. Markdown is a great choice for this, as it is human-readable and easily parsed by LLMs. After converting scraped data into structured markdown, we can feed it into LLM Scraper Agents and Reasoning Agents to make sense of it and extract insights.</p>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/#web-scraper-agents-for-public-data","title":"Web Scraper Agents for Public Data","text":"<p>Public data is data that is freely available on the web, such as news articles, blog posts, and product descriptions. This data can be scraped and used for various purposes and does not require any special permissions such as bypassing CAPTCHAs or logging in.</p> <p>Some APIs that can be used to convert raw HTML data into structured markdown include:</p> <p>Firecrawl</p> <p>Firecrawl turns entire websites into clean, LLM-ready markdown or structured data. Scrape, crawl and extract the web with a single API </p> <p>Output: Good quality markdown with most hyperlinks preserved</p> <p>Rate limit: 1000 requests per minute</p> <p>Cost: $0.06 per 100 pages</p> <p>Jina</p> <p>Turn a website into a structured data by adding r.jina.ai in front of the URL.</p> <p>Output: Focuses primarily on extracting content rather than preserving hyperlinks</p> <p>Rate limit: 1000 requests per minute</p> <p>Cost: Free</p> <p>Spider Cloud</p> <p>Spider is a leading web crawling tool designed for speed and cost-effectiveness, supporting various data formats including LLM-ready markdown.</p> <p>Output: Happy medium between Firecrawl and Jina with good quality markdown</p> <p>Rate limit: 50000 requests per minute</p> <p>Cost: $0.03 per 100 pages</p>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/#web-scraper-agents-for-private-data","title":"Web Scraper Agents for Private Data","text":"<p>As mentioned earlier, web automation frameworks like Selenium, Puppeteer, or Playwright are used to scrape private data that requires interaction to access restricted areas of a website. These tools can now be used to build agentic web scraping systems that can understand and reason about the data they collect. However, the issue with these tools is determining which UI elements to interact with to access the abovementioned restricted areas of a site. This is where AgentQL comes in.</p> <p>AgentQL</p> <p>AgentQL allows web automation frameworks to accurately navigate websites, even when the website structure changes.</p> <p>Rate limit: 10 API calls per minute</p> <p>Cost: $0.02 per API call</p> <p>Using AgentQL in conjunction with web automation frameworks enables developers to build agentic web scraping systems that can access and reason about private data, making the process more efficient and reliable.</p> <p></p> <p>Some examples of actions we're able to perform with AgentQL along with Playwright or Selenium include:</p> <ul> <li>Save and load authenticated state</li> <li>Wait for a page to load</li> <li>Close a cookie dialog</li> <li>Close popup windows</li> <li>Compare product prices across multiple websites</li> </ul>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/11/25/agentic-web-scraping-in-2024/#conclusion","title":"Conclusion","text":"<p>Agentic web scraping is transforming the way data is collected and analyzed, enabling developers to build systems that can understand and reason about the data they collect. By structuring data in a human-readable format like markdown and using tools like LLM Scraper Agents, Reasoning Agents, and AgentQL, developers can create efficient and reliable web scraping systems that can access both public and private data. This new approach to web scraping is revolutionizing the field of data-driven decision-making and opening up new possibilities for data analysis and insights.</p>","tags":["Web Scraping","Agentic Web Scraping","Data Collection","Data Analysis"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/","title":"Building an Agentic Web Scraping Pipeline for Crypto and Meme Coins","text":"","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#how-to-build-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins","title":"How to Build an Agentic Web Scraping Pipeline for Crypto and Meme Coins","text":"<p>Agentic web scraping revolutionizes data collection by leveraging advanced scraping tools and LLM-based reasoning to analyze websites for actionable insights. This guide demonstrates how to build a closed-loop pipeline for analyzing popular crypto and meme coin websites to enhance trading strategies.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#websites-to-scrape","title":"Websites to Scrape","text":"<p>The following websites will serve as data inputs for the pipeline:</p> <ol> <li> <p>Movement Market    Facilitates buying and selling meme coins with email and credit card integration.</p> </li> <li> <p>Raydium    A decentralized exchange for trading tokens and coins.</p> </li> <li> <p>Jupiter    A platform for seamless token swaps.</p> </li> <li> <p>Rugcheck    A tool for evaluating meme coins and identifying scams.</p> </li> <li> <p>Photon Sol    A browser-based solution for trading low-cap coins.</p> </li> <li> <p>Cielo Finance    Offers a copy-trading platform to follow top-performing wallets.</p> </li> </ol>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#step-1-structuring-data-for-public-websites","title":"Step 1: Structuring Data for Public Websites","text":"<p>For effective analysis, raw HTML data from these websites must be structured into human-readable Markdown.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#tool-firecrawl","title":"Tool: Firecrawl","text":"<p>Use Firecrawl to scrape and format the websites:</p> <p>Example: Scraping Movement Market <pre><code>import requests\n\nFIRECRAWL_API = \"https://api.firecrawl.com/v1/scrape\"\nAPI_KEY = \"your_firecrawl_api_key\"\n\ndef scrape_with_firecrawl(url):\n    headers = {\"Authorization\": f\"Bearer {API_KEY}\"}\n    data = {\"url\": url, \"output\": \"markdown\"}\n    response = requests.post(FIRECRAWL_API, json=data, headers=headers)\n\n    if response.status_code == 200:\n        return response.json().get(\"markdown\")\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None\n\nmarkdown_data = scrape_with_firecrawl(\"https://movement.market/\")\nprint(markdown_data)\n</code></pre></p> <p>Repeat the process for all listed websites to create structured Markdown files.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#step-2-analyze-public-data-with-reasoning-agents","title":"Step 2: Analyze Public Data with Reasoning Agents","text":"<p>Once the data is structured, LLMs can be used to analyze trends, extract features, and provide actionable insights.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#example-analyzing-data-with-openai-api","title":"Example: Analyzing Data with OpenAI API","text":"<pre><code>import openai\n\nopenai.api_key = \"your_openai_api_key\"\n\ndef analyze_markdown(markdown_data):\n    response = openai.Completion.create(\n        model=\"text-davinci-003\",\n        prompt=f\"Analyze this Markdown data to identify trading opportunities and community sentiment:\\n\\n{markdown_data}\",\n        max_tokens=1000\n    )\n    return response.choices[0].text.strip()\n\nmarkdown_example = \"# Example Markdown\\nThis is an example of markdown content for analysis.\"\nanalysis = analyze_markdown(markdown_example)\nprint(analysis)\n</code></pre>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#step-3-scraping-private-data-with-web-automation","title":"Step 3: Scraping Private Data with Web Automation","text":"<p>For websites requiring interaction (e.g., logins or dynamic content), use Python's Playwright library with AgentQL for advanced navigation and data extraction.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#example-scraping-photon-sol-with-playwright-and-agentql","title":"Example: Scraping Photon Sol with Playwright and AgentQL","text":"<p>Install Playwright and AgentQL: <pre><code>pip install playwright\nplaywright install\n</code></pre></p> <p>Write the Python Script: <pre><code>from playwright.sync_api import sync_playwright\n\ndef scrape_photon_sol():\n    with sync_playwright() as p:\n        browser = p.chromium.launch(headless=True)\n        page = browser.new_page()\n\n        # Navigate to Photon Sol\n        page.goto(\"https://photon-sol.tinyastro.io/\")\n\n        # Simulate interactions if needed\n        page.wait_for_timeout(3000)  # Wait for the page to load completely\n        content = page.content()\n\n        print(content)  # Print or save the page content\n        browser.close()\n\nscrape_photon_sol()\n</code></pre></p> <p>This approach ensures data can be extracted even from dynamic websites.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#step-4-automating-the-pipeline","title":"Step 4: Automating the Pipeline","text":"<p>Use Python-based automation tools like Apache Airflow to schedule and run the scraping and analysis pipeline.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#example-airflow-configuration-for-the-pipeline","title":"Example: Airflow Configuration for the Pipeline","text":"<pre><code>from airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom datetime import datetime\n\ndef scrape():\n    # Add scraping logic for all websites here\n    print(\"Scraping data...\")\n\ndef analyze():\n    # Add analysis logic here\n    print(\"Analyzing data...\")\n\nwith DAG('crypto_pipeline', start_date=datetime(2024, 11, 25), schedule_interval='@daily') as dag:\n    scrape_task = PythonOperator(task_id='scrape', python_callable=scrape)\n    analyze_task = PythonOperator(task_id='analyze', python_callable=analyze)\n\n    scrape_task &gt;&gt; analyze_task\n</code></pre>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#insights-from-websites","title":"Insights from Websites","text":"<p>Here's what you can focus on while analyzing the scraped data:</p> <ol> <li>Movement Market: Review ease of use, transaction speed, and user feedback.</li> <li>Raydium: Analyze liquidity and trading fees for tokens.</li> <li>Jupiter: Evaluate swap rates and platform efficiency.</li> <li>Rugcheck: Identify red flags in meme coin projects to avoid scams.</li> <li>Photon Sol: Assess platform usability for low-cap token trading.</li> <li>Cielo Finance: Analyze wallet strategies and portfolio performance.</li> </ol>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#step-5-closing-the-loop","title":"Step 5: Closing the Loop","text":"<p>To maintain a closed-loop pipeline, configure the workflow to automatically re-scrape websites at regular intervals and update analyses with new data. This ensures decisions are based on the latest information.</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/building-an-agentic-web-scraping-pipeline-for-crypto-and-meme-coins/#conclusion","title":"Conclusion","text":"<p>By integrating structured scraping, advanced analysis, and automation, this agentic pipeline enables real-time insights into the crypto and meme coin ecosystem. Use the steps outlined above to stay ahead in the volatile world of meme coins while minimizing risks and maximizing returns. \ud83d\ude80</p>","tags":["Web Scraping","Crypto","Meme Coins","Agentic Web Scraping","LLM","Data Analysis","Automation","Python","Playwright"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/","title":"Installing ROS 1 on Raspberry Pi","text":"","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#installing-ros-1-on-raspberry-pi","title":"Installing ROS 1 on Raspberry Pi","text":"<p>Robot Operating System (ROS) is an open-source framework widely used for robotic applications. This guide walks you through installing ROS 1 (Noetic) on a Raspberry Pi running Ubuntu. ROS 1 Noetic is the recommended version for Raspberry Pi and supports Ubuntu 20.04.</p>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following:</p> <ul> <li>Raspberry Pi 4 or later with at least 4GB of RAM (8GB is recommended for larger projects).</li> <li>Ubuntu 20.04 installed on the Raspberry Pi (Desktop or Server version).</li> <li>Internet connection for downloading and installing packages.</li> </ul>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-1-set-up-your-raspberry-pi","title":"Step 1: Set Up Your Raspberry Pi","text":"<ol> <li>Update and Upgrade System Packages:    <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre></li> <li>Install Required Dependencies:    <pre><code>sudo apt install -y curl gnupg2 lsb-release\n</code></pre></li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-2-configure-ros-repositories","title":"Step 2: Configure ROS Repositories","text":"<ol> <li> <p>Add the ROS Repository Key:    <pre><code>sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -\n</code></pre></p> </li> <li> <p>Add the ROS Noetic Repository:    <pre><code>echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/ros-latest.list\n</code></pre></p> </li> <li> <p>Update Package List:    <pre><code>sudo apt update\n</code></pre></p> </li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-3-install-ros-1-noetic","title":"Step 3: Install ROS 1 Noetic","text":"<ol> <li> <p>Install the Full ROS Desktop Version:    <pre><code>sudo apt install -y ros-noetic-desktop-full\n</code></pre></p> </li> <li> <p>Verify the Installation:    Check the installed ROS version:    <pre><code>rosversion -d\n</code></pre>    This should return <code>noetic</code>.</p> </li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-4-initialize-ros-environment","title":"Step 4: Initialize ROS Environment","text":"<ol> <li> <p>Set Up ROS Environment Variables:    <pre><code>echo \"source /opt/ros/noetic/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> </li> <li> <p>Install rosdep:    rosdep is a dependency management tool for ROS:    <pre><code>sudo apt install -y python3-rosdep\n</code></pre></p> </li> <li> <p>Initialize rosdep:    <pre><code>sudo rosdep init\nrosdep update\n</code></pre></p> </li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-5-test-the-ros-installation","title":"Step 5: Test the ROS Installation","text":"<ol> <li> <p>Run roscore:    Start the ROS master process:    <pre><code>roscore\n</code></pre>    Leave this terminal open.</p> </li> <li> <p>Open a New Terminal and Run turtlesim:    Launch a simple simulation:    <pre><code>rosrun turtlesim turtlesim_node\n</code></pre></p> </li> <li> <p>Move the Turtle:    Open another terminal and control the turtle using:    <pre><code>rosrun turtlesim turtle_teleop_key\n</code></pre>    Use the arrow keys to move the turtle in the simulation.</p> </li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#step-6-install-additional-ros-tools","title":"Step 6: Install Additional ROS Tools","text":"<p>To enhance your ROS setup, install the following:</p> <ol> <li> <p>catkin Tools:    <pre><code>sudo apt install -y python3-catkin-tools\n</code></pre></p> </li> <li> <p>Common ROS Packages:    <pre><code>sudo apt install -y ros-noetic-rviz ros-noetic-rqt ros-noetic-rqt-common-plugins\n</code></pre></p> </li> <li> <p>GPIO and Hardware Libraries (for Pi-specific projects):    <pre><code>sudo apt install -y wiringpi pigpio\n</code></pre></p> </li> </ol>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Issue: <code>rosdep</code> not initializing properly. Fix: Ensure network connectivity and retry:   <pre><code>sudo rosdep init\nrosdep update\n</code></pre></p> </li> <li> <p>Issue: ROS environment variables not set. Fix: Manually source the ROS setup file:   <pre><code>source /opt/ros/noetic/setup.bash\n</code></pre></p> </li> </ul>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2024/12/15/installing-ros-1-on-raspberry-pi/#conclusion","title":"Conclusion","text":"<p>Your Raspberry Pi is now configured with ROS 1 Noetic, ready for robotic projects. With this setup, you can develop and deploy various ROS packages, integrate hardware, and experiment with advanced robotic systems.</p> <p>Happy building!</p>","tags":["ROS","Raspberry Pi","Linux","Robotics"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/","title":"Setting Up Venom for WhatsApp Translation","text":"<p>Automating WhatsApp messaging can be a powerful tool for customer service, personal projects, or language translation. Using Venom and Google Translate, this guide will show you how to build a script that translates incoming Spanish messages to English and replies in Spanish.</p>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#why-use-venom","title":"Why Use Venom?","text":"<p>Venom is a robust Node.js library that allows you to interact with WhatsApp Web. It\u2019s perfect for creating bots, automating tasks, or building translation systems like the one we\u2019ll create here.</p>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#prerequisites","title":"Prerequisites","text":"<p>Before diving in, ensure you have the following installed:</p> <ol> <li>Node.js: Install from Node.js Official Website.</li> <li>npm or yarn: Installed alongside Node.js.</li> <li>Google Translate Library: For text translation.</li> <li>Venom: For WhatsApp automation.</li> </ol>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#install-required-packages","title":"Install Required Packages","text":"<p>Run the following commands to install the required libraries:</p> <pre><code>npm install venom-bot translate-google crypto\n</code></pre>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#implementation","title":"Implementation","text":"<p>Here\u2019s how to set up and use Venom to translate WhatsApp messages:</p>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#1-initialize-the-project","title":"1. Initialize the Project","text":"<p>Create a new file named <code>whatsapp_translator.js</code> and start with the following boilerplate:</p> <pre><code>const venom = require('venom-bot');\nconst translate = require('translate-google');\nconst crypto = require('crypto');\n</code></pre>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#2-set-up-your-whatsapp-contacts","title":"2. Set Up Your WhatsApp Contacts","text":"<p>Define your own WhatsApp ID (for self-messages) and the target contact:</p> <pre><code>const MY_CONTACT_ID = '12345678900@c.us'; // Your number\nconst TARGET_CONTACT_ID = '01234567890@c.us'; // Target contact's number\n</code></pre>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#3-implement-the-translation-logic","title":"3. Implement the Translation Logic","text":"<p>Here\u2019s the full script for translating messages and avoiding duplicates using a hash set:</p> <pre><code>// Hash sets to prevent duplicate message processing\nconst processedMessageHashes = new Set();\n\nvenom\n  .create({\n    session: 'my-whatsapp-session',\n    multidevice: true,\n  })\n  .then((client) =&gt; start(client))\n  .catch((err) =&gt; console.error('Error starting Venom:', err));\n\nfunction start(client) {\n  console.log(`Listening for messages between yourself (${MY_CONTACT_ID}) and ${TARGET_CONTACT_ID}.`);\n\n  const delay = (ms) =&gt; new Promise((resolve) =&gt; setTimeout(resolve, ms));\n\n  // Function to generate a hash for deduplication\n  function generateHash(messageBody) {\n    return crypto.createHash('sha256').update(messageBody).digest('hex');\n  }\n\n  // Periodically check for new messages in the self-chat\n  setInterval(async () =&gt; {\n    try {\n      const messages = await client.getAllMessagesInChat(MY_CONTACT_ID, true, true);\n      for (const message of messages) {\n        processMessage(client, message, generateHash);\n      }\n    } catch (err) {\n      console.error('Error retrieving self-chat messages:', err);\n    }\n  }, 2000); // Check every 2 seconds\n\n  // Handle incoming messages\n  client.onMessage((message) =&gt; processMessage(client, message, generateHash));\n}\n\nasync function processMessage(client, message, generateHash) {\n  const messageHash = generateHash(message.body);\n\n  // Skip if the message has already been processed\n  if (processedMessageHashes.has(messageHash)) {\n    return;\n  }\n\n  // Mark the message as processed\n  processedMessageHashes.add(messageHash);\n\n  try {\n    if (message.from === MY_CONTACT_ID &amp;&amp; message.to === MY_CONTACT_ID) {\n      console.log('Message is from you (self-chat).');\n\n      // Translate English to Spanish and send to the target contact\n      const translatedToSpanish = await translate(message.body, { to: 'es' });\n      console.log(`Translated (English \u2192 Spanish): ${translatedToSpanish}`);\n\n      await client.sendText(TARGET_CONTACT_ID, translatedToSpanish);\n      console.log(`Sent translated message to ${TARGET_CONTACT_ID}: ${translatedToSpanish}`);\n    } else if (message.from === TARGET_CONTACT_ID &amp;&amp; !message.isGroupMsg) {\n      console.log('Message is from the target contact.');\n\n      // Translate Spanish to English and send to the self-chat\n      const translatedToEnglish = await translate(message.body, { to: 'en' });\n      console.log(`Translated (Spanish \u2192 English): ${translatedToEnglish}`);\n\n      const response = `*Translation (Spanish \u2192 English):*\\nOriginal: ${message.body}\\nTranslated: ${translatedToEnglish}`;\n      await client.sendText(MY_CONTACT_ID, response);\n      console.log(`Posted translation to yourself: ${MY_CONTACT_ID}`);\n    }\n  } catch (error) {\n    console.error('Error processing message:', error);\n    // Remove the hash if processing fails\n    processedMessageHashes.delete(messageHash);\n  }\n}\n</code></pre>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#4-run-the-script","title":"4. Run the Script","text":"<p>Execute the script using Node.js:</p> <pre><code>node whatsapp_translator.js\n</code></pre>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#5-what-happens","title":"5. What Happens?","text":"<ol> <li>Messages you send to yourself (in English) are translated to Spanish and sent to the target contact.</li> <li>Messages from the target contact (in Spanish) are translated to English and sent to your self-chat.</li> </ol>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Verify Contact IDs:    Ensure <code>MY_CONTACT_ID</code> and <code>TARGET_CONTACT_ID</code> are correctly defined.</li> <li>Check Logs:    Use <code>console.log</code> statements to debug the flow of messages.</li> <li>Dependency Issues:    Reinstall packages with <code>npm install</code> if you encounter errors.</li> </ol>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/05/setting-up-venom-for-whatsapp-translation/#conclusion","title":"Conclusion","text":"<p>This script automates translation for WhatsApp messages, enabling seamless communication across languages. By leveraging Venom and Google Translate, you can extend this setup to support additional languages, integrate with databases, or even build advanced customer service tools. With this foundation, the possibilities are endless!</p>","tags":["Node.js","Venom","WhatsApp Automation","Translation","JavaScript"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/","title":"Fine-Tuning GPT-4o-mini: A Comprehensive Guide","text":"<p>Fine-tuning GPT-4o-mini allows you to create a customized AI model tailored to specific needs, such as generating content or answering domain-specific questions. This guide will walk you through preparing your data and executing the fine-tuning process.</p>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#step-1-prepare-your-dataset","title":"Step 1: Prepare Your Dataset","text":"","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#dataset-format","title":"Dataset Format","text":"<p>Fine-tuning requires a <code>.jsonl</code> dataset where each line is a structured chat interaction. For example:</p> <pre><code>{\"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is the capital of France?\"}, {\"role\": \"assistant\", \"content\": \"The capital of France is Paris.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are a travel expert.\"}, {\"role\": \"user\", \"content\": \"What are the best places to visit in Europe?\"}, {\"role\": \"assistant\", \"content\": \"Some of the best places to visit in Europe include Paris, Rome, Barcelona, and Amsterdam.\"}]}\n</code></pre>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#automate-dataset-preparation","title":"Automate Dataset Preparation","text":"<p>Use the Text to JSONL Converter available at Streamlit to convert <code>.txt</code> files into <code>.jsonl</code> format. Ensure you have at least 10 samples.</p>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#step-2-fine-tune-gpt-4o-mini","title":"Step 2: Fine-Tune GPT-4o-mini","text":"","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#required-code-for-fine-tuning","title":"Required Code for Fine-Tuning","text":"<p>Save your <code>stories.jsonl</code> file and run the following Python script to initiate fine-tuning:</p> <pre><code>from openai import OpenAI\nimport openai\nimport os\n\n# Initialize OpenAI client and set API key\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nclient = OpenAI()\n\n# Step 1: Upload the training file\nresponse = client.files.create(\n    file=open(\"stories.jsonl\", \"rb\"),  # Replace with the correct path to your JSONL file\n    purpose=\"fine-tune\"\n)\n\n# Extract the file ID from the response object\ntraining_file_id = response.id\nprint(f\"File uploaded successfully. File ID: {training_file_id}\")\n\n# Step 2: Create a fine-tuning job\nfine_tune_response = client.fine_tuning.jobs.create(\n    training_file=training_file_id,\n    model=\"gpt-4o-mini-2024-07-18\"  # Replace with the desired base model\n)\n\n# Output the fine-tuning job details\nprint(\"Fine-tuning job created successfully:\")\nprint(fine_tune_response)\n</code></pre>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li>Initialize OpenAI Client:</li> <li> <p>The script imports the <code>openai</code> library and initializes the API using your key stored in the <code>OPENAI_API_KEY</code> environment variable.</p> </li> <li> <p>Upload Training File:</p> </li> <li> <p>The script uploads your <code>stories.jsonl</code> file to OpenAI's servers for processing.</p> </li> <li> <p>Create Fine-Tuning Job:</p> </li> <li> <p>The uploaded file is referenced to create a fine-tuning job for the <code>gpt-4o-mini-2024-07-18</code> model. Replace this with the desired base model as needed.</p> </li> <li> <p>Monitor Job Details:</p> </li> <li>The script outputs the details of the fine-tuning job, including its status and other metadata.</li> </ol>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/07/fine-tuning-gpt-4o-mini-model-in-chat-text-completion-format/#best-practices-for-fine-tuning","title":"Best Practices for Fine-Tuning","text":"<ol> <li>Quality Dataset: Ensure the dataset is diverse and adheres to the required structure.</li> <li>System Role Definition: Use clear instructions in the <code>system</code> role to guide the model\u2019s behavior.</li> <li>Testing and Iteration: Evaluate the fine-tuned model and refine the dataset if necessary.</li> </ol> <p>By using this step-by-step guide and the provided Python script, you can fine-tune the GPT-4o-mini model for your unique use case effectively. Happy fine-tuning!</p>","tags":["GPT-4o-mini","Fine-Tuning","OpenAI","Machine Learning","AI Models"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/","title":"AWS Lambda and Blender: Revolutionizing 3D Rendering in the Cloud","text":"<p>One idea that has been on my ideological backburner for several years now is the concept of using AWS Lambda for rendering a three-dimensional STL or other Blender-compatible file for GitHub contributions. Since the inception of this idea, I've significantly refined my understanding of 3D printing and Python scripting, which has allowed me to develop a more robust and scalable solution.</p>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#the-concept","title":"The Concept","text":"<p>The core concept revolves around leveraging AWS Lambda for rendering 3D scenes\u2014a solution tailored for projects requiring high scalability and rapid turnaround times. This technique excels in scenarios involving numerous simpler assets that must be rendered swiftly, effectively harnessing the computational prowess of cloud technology.</p>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#the-implementation","title":"The Implementation","text":"<p>The integration of Blender, a popular open-source 3D graphics software, running on AWS Lambda, epitomizes this blend of flexibility and computational efficiency. This approach is ideal for assets that fit within Lambda's constraints, currently supporting up to 6 vCPUs and 10GB of memory. For more demanding rendering needs, options like EC2 instances or AWS Thinkbox Deadline provide enhanced computational capacity, making them suitable for complex tasks.</p>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#the-workflow","title":"The Workflow","text":"<p>The workflow for this implementation is straightforward:</p> <ol> <li>Upload the Blender file to an S3 bucket: Begin by uploading the Blender file to an S3 bucket, ensuring it is accessible to the Lambda function.</li> <li>Invoke the Lambda function: Trigger the Lambda function to render the 3D scene using Blender.</li> <li>Retrieve the rendered image: Once the rendering is complete, retrieve the rendered image from the S3 bucket.</li> </ol>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#the-benefits","title":"The Benefits","text":"<p>The benefits of this approach are manifold:</p> <ul> <li>Scalability: AWS Lambda's scalability ensures that rendering tasks can be efficiently distributed across multiple instances, enhancing performance.</li> <li>Cost-Effectiveness: Pay only for the compute time consumed, making it a cost-effective solution for rendering tasks.</li> <li>Flexibility: The ability to scale up or down based on project requirements offers unparalleled flexibility.</li> <li>Efficiency: The seamless integration of Blender with AWS Lambda streamlines the rendering process, enhancing efficiency.</li> </ul>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#credits","title":"Credits","text":"<p>The inspiration for this approach was drawn from a detailed implementation by Theodo in 2021, showcasing how Blender can be effectively adapted for serverless architecture. This concept offers transformative potential in the 3D rendering landscape, demonstrating how cloud technologies can redefine efficiency and scalability in creative workflows.</p>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/11/aws-lambda-and-blender---revolutionizing-3d-rendering-in-the-cloud/#conclusion","title":"Conclusion","text":"<p>The fusion of AWS Lambda and Blender represents a paradigm shift in 3D rendering, offering a potent solution for projects requiring rapid, scalable rendering capabilities. By leveraging the computational prowess of AWS Lambda and the versatility of Blender, developers can unlock new possibilities in the 3D rendering domain, revolutionizing creative workflows and enhancing efficiency.</p>","tags":["AWS Lambda","Blender","Cloud Computing","3D Rendering"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/","title":"Bypassing Cloudflare with Selenium and Undetected-Chromedriver","text":"","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#bypassing-cloudflare-with-selenium-and-undetected-chromedriver","title":"Bypassing Cloudflare with Selenium and Undetected-Chromedriver","text":"<p>By combining Selenium with undetected-chromedriver (UC), you can overcome common automation challenges like Cloudflare's browser verification. This guide explores practical workflows and techniques to enhance your web automation projects.</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#why-use-selenium-with-undetected-chromedriver","title":"Why Use Selenium with Undetected-Chromedriver?","text":"<p>Cloudflare protections are designed to block bots, posing challenges for developers. By using undetected-chromedriver with Selenium, you can:</p> <ul> <li>Bypass Browser Fingerprinting: UC modifies ChromeDriver to avoid detection.</li> <li>Handle Cloudflare Challenges: Seamlessly bypass \"wait while your browser is verified\" messages.</li> <li>Mitigate CAPTCHA Issues: Reduce interruptions caused by automated bot checks.</li> </ul>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#detection-challenges-in-web-automation","title":"Detection Challenges in Web Automation","text":"<p>Websites employ multiple strategies to detect and prevent automated interactions:</p> <ul> <li>CAPTCHA Challenges: Validating user authenticity.</li> <li>Cloudflare Browser Verification: Infinite loading screens or token-based checks.</li> <li>Bot Detection Mechanisms: Browser fingerprinting, behavioral analytics, and cookie validation.</li> </ul> <p>These barriers often require advanced techniques to maintain automation workflows.</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#the-solution-selenium-and-undetected-chromedriver","title":"The Solution: Selenium and Undetected-Chromedriver","text":"<p>The undetected-chromedriver library modifies the default ChromeDriver to emulate human-like behavior and evade detection. When integrated with Selenium, it allows:</p> <ol> <li>Seamless CAPTCHA Bypass: Minimize interruptions by automating responses or avoiding challenges.</li> <li>Cloudflare Token Handling: Automatically manage verification processes.</li> <li>Cookie Reuse for Session Preservation: Skip repetitive verifications by reusing authenticated cookies.</li> </ol>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#implementation-guide-setting-up-selenium-with-undetected-chromedriver","title":"Implementation Guide: Setting Up Selenium with Undetected-Chromedriver","text":"","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-1-install-required-libraries","title":"Step 1: Install Required Libraries","text":"<p>Install Selenium and undetected-chromedriver: <pre><code>pip install selenium undetected-chromedriver\n</code></pre></p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-2-initialize-the-browser-driver","title":"Step 2: Initialize the Browser Driver","text":"<p>Set up a Selenium session with UC: <pre><code>import undetected_chromedriver as uc\n\n# Initialize the driver\ndriver = uc.Chrome()\n\n# Navigate to a website\ndriver.get(\"https://example.com\")\nprint(\"Page Title:\", driver.title)\n\n# Quit the driver\ndriver.quit()\n</code></pre></p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-3-handle-captcha-and-cloudflare-challenges","title":"Step 3: Handle CAPTCHA and Cloudflare Challenges","text":"<ul> <li>Use UC to bypass passive bot checks.</li> <li>Extract and reuse cookies to maintain session continuity:   <pre><code>cookies = driver.get_cookies()\ndriver.add_cookie(cookies)\n</code></pre></li> </ul>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#advanced-automation-workflow-with-cookies","title":"Advanced Automation Workflow with Cookies","text":"","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-1-attempt-standard-automation","title":"Step 1: Attempt Standard Automation","text":"<p>Use Selenium with UC to navigate and interact with the website.</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-2-use-cookies-for-session-continuity","title":"Step 2: Use Cookies for Session Continuity","text":"<p>Manually authenticate once, extract cookies, and reuse them for automated sessions: <pre><code># Save cookies after manual login\ncookies = driver.get_cookies()\n\n# Use cookies in future sessions\nfor cookie in cookies:\n    driver.add_cookie(cookie)\ndriver.refresh()\n</code></pre></p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#step-3-fall-back-to-manual-assistance","title":"Step 3: Fall Back to Manual Assistance","text":"<p>Prompt users to resolve CAPTCHA or login challenges in a separate session and capture the cookies for automation.</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#proposed-workflow-for-automation","title":"Proposed Workflow for Automation","text":"<ol> <li>Initial Attempt: Start with Selenium and UC for automation.</li> <li>Fallback to Cookies: Reuse cookies for continuity if CAPTCHA or Cloudflare challenges arise.</li> <li>Manual Assistance: Open a browser session for user input, capture cookies, and resume automation.</li> </ol> <p>This iterative process ensures maximum efficiency and minimizes disruptions.</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#conclusion","title":"Conclusion","text":"<p>Selenium and undetected-chromedriver provide a powerful toolkit for overcoming automation barriers like CAPTCHA and Cloudflare protections. By leveraging cookies and manual fallbacks, you can create robust workflows that streamline automation processes.</p> <p>Ready to enhance your web automation? Start integrating Selenium with UC today and unlock new possibilities!</p>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/bypassing-cloudflare-with-selenium-and-undetected-chromedriver/#references","title":"References","text":"<ul> <li>Selenium Documentation</li> <li>Undetected-Chromedriver</li> <li>CAPTCHA Bypass Strategies</li> <li>Cloudflare and Bot Detection</li> </ul>","tags":["Selenium","Undetected-Chromedriver","Cloudflare Mitigation","Web Automation"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/","title":"Setting Up Browser Use with Botright","text":"<p>Automating web browsing while remaining undetected is critical for various use cases like scraping, testing, or automation. This guide shows you how to set up Browser Use with Botright, a robust library for stealth browsing and captcha solving.</p>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#why-use-botright","title":"Why Use Botright?","text":"<p>Botright enhances stealth browsing by leveraging techniques like fingerprint masking and AI-driven captcha solving. It integrates seamlessly with Playwright, making it perfect for stealthy automation tasks.</p>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following tools and dependencies are installed:</p> <ol> <li>Python 3.11 or Higher: Install from python.org.</li> <li>pip: Included with Python.</li> <li>Browser Use: The main framework.</li> <li>Botright: For stealth features and advanced automation.</li> </ol>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#install-required-packages","title":"Install Required Packages","text":"<p>Run the following commands to set up your environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/browser-use/browser-use\ncd browser-use\n\n# Install uv for environment management\npip install uv\n\n# Create a virtual environment\nuv venv --python 3.11\n\n# Activate the virtual environment\nsource .venv/bin/activate # For Linux/macOS\n.venv\\Scripts\\activate    # For Windows\n\n# Install Browser Use with development dependencies\nuv pip install . .\"[dev]\"\n\n# Install Botright\npip install botright\nplaywright install\n</code></pre>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#implementation","title":"Implementation","text":"<p>Follow these steps to integrate Botright with Browser Use:</p>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#1-update-mainpy","title":"1. Update <code>main.py</code>","text":"<p>Replace the Playwright browser initialization with Botright\u2019s initialization. Here\u2019s the updated <code>main.py</code>:</p> <pre><code>import asyncio\nimport botright\n\nasync def main():\n    # Initialize Botright with enhanced stealth options\n    botright_client = await botright.Botright(headless=False)\n\n    # Launch a browser instance\n    browser = await botright_client.new_browser()\n\n    # Open a new page\n    page = await browser.new_page()\n\n    # Navigate to a website\n    await page.goto(\"https://example.com\")\n\n    # Perform browser actions (e.g., take a screenshot)\n    await page.screenshot(path=\"screenshot.png\")\n    print(\"Screenshot saved!\")\n\n    # Close the browser and Botright client\n    await browser.close()\n    await botright_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#2-configure-environment-variables","title":"2. Configure Environment Variables","text":"<p>Set up required API keys by copying the example environment file:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Add the following to your <code>.env</code> file:</p> <pre><code>BOTRIGHT_API_KEY=your_botright_api_key\n</code></pre>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#3-run-the-script","title":"3. Run the Script","text":"<p>Run your updated <code>main.py</code> script:</p> <pre><code>python main.py\n</code></pre>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#4-what-happens","title":"4. What Happens?","text":"<ol> <li>Browser Initialization: Botright launches a Chromium-based browser instance with stealth enhancements.</li> <li>Website Navigation: The browser navigates to the specified URL (<code>https://example.com</code>).</li> <li>Screenshot Capture: A screenshot is taken and saved as <code>screenshot.png</code>.</li> </ol>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Botright Logs:    Use <code>print</code> statements or Botright's built-in logging for debugging.</li> <li>Browser Errors:    Verify the installed version of Playwright and Botright.</li> <li>Environment Issues:    Ensure your <code>.env</code> file contains the correct API keys.</li> </ol>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#advanced-features","title":"Advanced Features","text":"","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#captcha-solving","title":"Captcha Solving","text":"<p>To solve captchas, use Botright's built-in methods. Example:</p> <pre><code>await page.solve_captcha()\n</code></pre>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#fingerprint-masking","title":"Fingerprint Masking","text":"<p>Botright automatically handles fingerprint masking. To customize this, refer to the Botright documentation.</p>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/15/setting-up-browser-use-with-botright/#conclusion","title":"Conclusion","text":"<p>By integrating Botright with Browser Use, you unlock advanced stealth browsing capabilities ideal for sensitive automation tasks. This setup provides a solid foundation for further enhancements, such as integrating AI-based analysis or multi-page navigation workflows.</p>","tags":["Python","Botright","Browser Automation","Playwright","Stealth Browsing"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/","title":"Setting Up and Running a Roboclaw-Based ROS Node with Obstacle Avoidance","text":"","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance","title":"Setting Up and Running a Roboclaw-Based ROS Node with Obstacle Avoidance","text":"<p>This guide walks you through setting up and running a Roboclaw-based ROS node with obstacle avoidance functionality using LIDAR sensors. Follow these steps to configure and launch your robotics system efficiently.</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure the following are set up on your system:</p> <ol> <li>ROS Installed: Ensure you have ROS Melodic or a compatible version installed on your system.</li> <li>Workspace Prepared: Your ROS workspace (e.g., <code>~/armpi_pro</code>) is built and sourced.</li> <li>Packages Installed:</li> <li><code>roboclaw_ros</code> for motor control.</li> <li><code>ldlidar_stl_ros</code> for LIDAR sensor integration.</li> <li>Hardware Connections:</li> <li>Roboclaw is connected via <code>/dev/ttyACM0</code>.</li> <li>LIDAR sensor is operational and connected (e.g., <code>/dev/ttyUSB0</code>).</li> </ol>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#launching-the-required-nodes","title":"Launching the Required Nodes","text":"<p>To operate the system, you need to launch three components in sequence:</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#1-start-the-ros-core","title":"1. Start the ROS Core","text":"<p>Open a terminal and launch the ROS core:</p> <pre><code>roscore\n</code></pre> <p>Keep this terminal open as it provides the foundation for all ROS nodes.</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#2-launch-the-roboclaw-node","title":"2. Launch the Roboclaw Node","text":"<p>In a new terminal, navigate to your workspace and launch the Roboclaw node:</p> <pre><code>roslaunch roboclaw_node roboclaw.launch\n</code></pre> <p>This node handles motor control, publishing odometry, and subscribing to velocity commands (<code>/cmd_vel</code>).</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#3-launch-the-lidar-node","title":"3. Launch the LIDAR Node","text":"<p>In another terminal, launch the LIDAR node:</p> <pre><code>roslaunch ldlidar_stl_ros ld19.launch\n</code></pre> <p>This node processes LIDAR data and publishes it to the <code>/scan</code> topic.</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#running-the-obstacle-avoidance-node","title":"Running the Obstacle Avoidance Node","text":"<p>Once the Roboclaw and LIDAR nodes are running, you can start the obstacle avoidance script. This script subscribes to <code>/scan</code> for LIDAR data and publishes velocity commands to <code>/cmd_vel</code>.</p> <ol> <li> <p>Ensure the script is located at:    <pre><code>~/armpi_pro/src/roboclaw_ros/roboclaw_node/scripts/obstacle_avoidance.py\n</code></pre></p> </li> <li> <p>Make the script executable:    <pre><code>chmod +x ~/armpi_pro/src/roboclaw_ros/roboclaw_node/scripts/obstacle_avoidance.py\n</code></pre></p> </li> <li> <p>Run the script using <code>rosrun</code>:    <pre><code>rosrun roboclaw_node obstacle_avoidance.py\n</code></pre></p> </li> </ol>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#how-it-works","title":"How It Works","text":"<ol> <li> <p>LIDAR Data Processing:    The obstacle avoidance node processes data from <code>/scan</code>. It checks for obstacles within 6 inches (0.15 meters) in front of the robot.</p> </li> <li> <p>Motor Commands:</p> </li> <li>If an obstacle is detected, the script sends a stop command to <code>/cmd_vel</code>.</li> <li>If the path is clear, the script commands the robot to move forward.</li> </ol>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#example-workflow","title":"Example Workflow","text":"<p>Here\u2019s how you would set up and run the entire system step-by-step:</p> <ol> <li> <p>Open a terminal and start the ROS core:    <pre><code>roscore\n</code></pre></p> </li> <li> <p>In a second terminal, launch the Roboclaw node:    <pre><code>roslaunch roboclaw_node roboclaw.launch\n</code></pre></p> </li> <li> <p>In a third terminal, launch the LIDAR node:    <pre><code>roslaunch ldlidar_stl_ros ld19.launch\n</code></pre></p> </li> <li> <p>Finally, in a fourth terminal, run the obstacle avoidance script:    <pre><code>rosrun roboclaw_node obstacle_avoidance.py\n</code></pre></p> </li> </ol>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Package Not Found:    If you encounter errors like <code>package 'roboclaw_node' not found</code>, rebuild your workspace:    <pre><code>cd ~/armpi_pro\ncatkin_make\nsource devel/setup.bash\n</code></pre></p> </li> <li> <p>LIDAR or Roboclaw Not Responding:</p> </li> <li>Verify device connections using <code>ls /dev/tty*</code> for correct port names.</li> <li> <p>Update the respective <code>.launch</code> files to reflect the correct ports.</p> </li> <li> <p>Script Permissions:    Ensure all scripts are executable using:    <pre><code>chmod +x ~/armpi_pro/src/roboclaw_ros/roboclaw_node/scripts/*.py\n</code></pre></p> </li> </ol>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-and-running-a-roboclaw-based-ros-node-with-obstacle-avoidance/#conclusion","title":"Conclusion","text":"<p>With this setup, your robot is capable of autonomously navigating forward and stopping when obstacles are detected. The modular structure allows for easy debugging and future enhancements, such as adding new sensors or navigation strategies.</p> <p>Mastering these steps ensures a reliable and robust robotic system ready for real-world applications.</p>","tags":["ROS","Roboclaw","LIDAR","Obstacle Avoidance","Ubuntu","Autonomous Vehicles"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/","title":"Setting Up Hector SLAM with ROS 1 for a Roboclaw-Based Rover","text":"","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover","title":"Setting Up Hector SLAM with ROS 1 for a Roboclaw-Based Rover","text":"<p>This guide details the steps to configure and use Hector SLAM with a Roboclaw-based ROS 1 robot. We\u2019ll cover LIDAR integration, transform configuration, and how to set RViz for successful mapping and navigation.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following are set up on your system:</p> <ol> <li>ROS Installed: ROS Melodic or a compatible version is installed.</li> <li>Workspace Prepared: A catkin workspace (e.g., <code>~/armpi_pro</code>) is created, built, and sourced.</li> <li>Hector SLAM Package:</li> <li>Installed and located in your workspace under <code>src/hector_slam</code>.</li> <li>Ensure <code>hector_mapping</code> and <code>hector_slam_launch</code> are available.</li> <li>LIDAR Sensor:</li> <li>Configured and publishing scan data to <code>/scan</code>.</li> <li>Roboclaw Node:</li> <li>Operational, publishing odometry to <code>/odom</code>.</li> </ol>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#steps-to-set-up-hector-slam","title":"Steps to Set Up Hector SLAM","text":"","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#1-launch-ros-core","title":"1. Launch ROS Core","text":"<p>Open a terminal and start the ROS core:</p> <pre><code>roscore\n</code></pre> <p>This is required for all other nodes to communicate.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#2-launch-the-lidar-and-roboclaw-nodes","title":"2. Launch the LIDAR and RoboClaw Nodes","text":"<p>To enable LIDAR data for mapping, launch the LIDAR node in a new terminal:</p> <pre><code>roslaunch ldlidar_stl_ros ld19.launch\n</code></pre> <p>This ensures the LIDAR sensor is active and publishing data to the <code>/scan</code> topic, which is necessary for Hector SLAM to create a map.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#3-configure-and-launch-hector-mapping","title":"3. Configure and Launch Hector Mapping","text":"<p>In your workspace, navigate to the Hector SLAM launch folder:</p> <pre><code>cd ~/armpi_pro/src/hector_slam/hector_slam_launch/launch\n</code></pre> <p>Use the <code>tutorial.launch</code> file as a base for running Hector SLAM. Modify the following parameters in the launch file to match your setup:</p> <pre><code>&lt;launch&gt;\n    &lt;!-- Hector Mapping Node --&gt;\n    &lt;node pkg=\"hector_mapping\" type=\"hector_mapping\" name=\"hector_mapping\" output=\"screen\"&gt;\n        &lt;param name=\"pub_map_odom_transform\" value=\"true\"/&gt;\n        &lt;param name=\"map_frame\" value=\"map\"/&gt;\n        &lt;param name=\"base_frame\" value=\"base_link\"/&gt;\n        &lt;param name=\"odom_frame\" value=\"odom\"/&gt;\n        &lt;remap from=\"scan\" to=\"/scan\"/&gt;  &lt;!-- Your LIDAR topic --&gt;\n        &lt;remap from=\"odom\" to=\"/odom\"/&gt;  &lt;!-- Your odometry topic --&gt;\n    &lt;/node&gt;\n\n    &lt;!-- Static Transform Publisher --&gt;\n    &lt;node pkg=\"tf2_ros\" type=\"static_transform_publisher\" name=\"laser_to_base_link\"\n          args=\"0 0 0.2 0 0 0 base_link laser_link\"/&gt;\n\n    &lt;!-- RViz for Visualization --&gt;\n    &lt;node pkg=\"rviz\" type=\"rviz\" name=\"rviz\" args=\"-d $(find hector_slam_launch)/rviz_cfg/mapping.rviz\" /&gt;\n&lt;/launch&gt;\n</code></pre> <p>Run the newly created launch file above using:</p> <pre><code>roslaunch hector_slam_launch mapping_with_odom.launch\n</code></pre>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#4-adjust-rviz-configuration","title":"4. Adjust RViz Configuration","text":"<p>To visualize the mapping process:</p> <ol> <li> <p>Start RViz:    <pre><code>rosrun rviz rviz\n</code></pre></p> </li> <li> <p>Set the Fixed Frame to <code>scanmatcher_frame</code>:</p> </li> <li>Navigate to <code>Global Options</code> in RViz.</li> <li> <p>Set <code>Fixed Frame</code> to <code>scanmatcher_frame</code>.</p> </li> <li> <p>Add relevant displays:</p> </li> <li>Map: Subscribe to <code>/map</code> for live updates.</li> <li>LaserScan: Subscribe to <code>/scan</code> to visualize LIDAR data.</li> <li>TF: Check the frame hierarchy and transformations.</li> </ol>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#5-launch-the-roboclaw-node","title":"5. Launch the Roboclaw Node","text":"<p>Start the Roboclaw node to handle motor control and odometry:</p> <pre><code>roslaunch roboclaw_node roboclaw.launch\n</code></pre> <p>This node should publish odometry data to the <code>/odom</code> topic, which Hector SLAM uses.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#6-run-the-rover","title":"6. Run the rover","text":"<p>Now that the mapping and motor control nodes are active:</p> <ul> <li>Drive the rover manually or programmatically using the following script:     <pre><code>    #!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\"\nExample: Use Pygame to read an Xbox controller and RoboClaw on ROS Melodic (Python 2).\nNo f-strings; uses .format().\n\nMake sure:\n  1) roscore is running (for rospy logs).\n  2) SDL_VIDEODRIVER=dummy is set if headless: export SDL_VIDEODRIVER=dummy\n  3) RoboClaw is on /dev/ttyACM0 (or change param).\n\"\"\"\n\nimport sys\nimport rospy\nimport pygame\nimport time\n\n# For TF in Melodic (Python 2)\nimport tf\nimport tf.transformations as tft\n\n# RoboClaw library (python2-compatible)\nfrom roboclaw import Roboclaw\n\nclass XboxRoboclawDebugPy2(object):\n    def __init__(self):\n        # 1) ROS init\n        rospy.init_node(\"xbox_teleop_debug_py2\", anonymous=True)\n        rospy.loginfo(\"Starting xbox_teleop_debug_py2 node...\")\n\n        # 2) RoboClaw Setup\n        self.port_name = rospy.get_param(\"~port\", \"/dev/ttyACM0\")\n        self.baud_rate = rospy.get_param(\"~baud\", 115200)\n        self.address   = rospy.get_param(\"~address\", 0x80)  # decimal 128\n\n        rospy.loginfo(\"Attempting to open RoboClaw on {0} at {1} baud, address=0x{2:X}\".format(\n            self.port_name, self.baud_rate, self.address))\n        self.rc = Roboclaw(self.port_name, self.baud_rate)\n        if not self.rc.Open():\n            rospy.logerr(\"Failed to open RoboClaw on {0}. Exiting.\".format(self.port_name))\n            sys.exit(1)\n        rospy.loginfo(\"RoboClaw opened successfully on {0}.\".format(self.port_name))\n\n        # 3) Initialize Pygame\n        pygame.init()\n        pygame.joystick.init()\n\n        joystick_count = pygame.joystick.get_count()\n        rospy.loginfo(\"Detected {0} joystick(s).\".format(joystick_count))\n        if joystick_count == 0:\n            rospy.logerr(\"No joystick detected. Exiting.\")\n            sys.exit(1)\n\n        self.joystick = pygame.joystick.Joystick(0)\n        self.joystick.init()\n        rospy.loginfo(\"Joystick: {0}\".format(self.joystick.get_name()))\n\n        # 4) Speed config\n        self.max_speed_cmd = 15.0  # if 127 is full speed, 20 is slower\n        self.deadzone = 0.1\n        rospy.loginfo(\"max_speed_cmd={0}, deadzone={1}\".format(self.max_speed_cmd, self.deadzone))\n\n        # Rate\n        self.loop_rate = rospy.Rate(20)  # 20 Hz\n\n        # On shutdown =&gt; stop motors\n        rospy.on_shutdown(self.stop_motors)\n\n        rospy.loginfo(\"Initialization complete. Ready to run...\")\n\n    def stop_motors(self):\n        rospy.loginfo(\"Stopping motors.\")\n        self.rc.ForwardM1(self.address, 0)\n        self.rc.ForwardM2(self.address, 0)\n\n    def run(self):\n        loop_counter = 0\n        while not rospy.is_shutdown():\n            loop_counter += 1\n            # Just for debugging\n            rospy.logdebug(\"Main loop iteration={0}\".format(loop_counter))\n\n            pygame.event.pump()\n\n            # Example: left stick vertical = axis 1, right stick horizontal = axis 3\n            forward_axis = -self.joystick.get_axis(1)\n            turn_axis    =  self.joystick.get_axis(3)\n\n            # Debug prints\n            rospy.logdebug(\"Raw axes =&gt; forward_axis={0:.2f}, turn_axis={1:.2f}\".format(\n                forward_axis, turn_axis))\n\n            # Deadzone\n            if abs(forward_axis) &lt; self.deadzone:\n                forward_axis = 0.0\n            if abs(turn_axis) &lt; self.deadzone:\n                turn_axis = 0.0\n\n            # Skid-steer mixing\n            left_val  = forward_axis - turn_axis\n            right_val = forward_axis + turn_axis\n\n            # clamp [-1..+1]\n            left_val  = max(-1.0, min(1.0, left_val))\n            right_val = max(-1.0, min(1.0, right_val))\n\n            # Convert to RoboClaw speed\n            left_speed, left_dir   = self.convert_speed(left_val)\n            right_speed, right_dir = self.convert_speed(right_val)\n\n            rospy.logdebug(\"Mixed =&gt; L={0:.2f}, R={1:.2f} =&gt; speeds {2} ({3}), {4} ({5})\".format(\n                left_val, right_val, left_speed, left_dir, right_speed, right_dir))\n\n            # Send to motors\n            if left_dir == \"forward\":\n                self.rc.ForwardM1(self.address, left_speed)\n            else:\n                self.rc.BackwardM1(self.address, left_speed)\n\n            if right_dir == \"forward\":\n                self.rc.ForwardM2(self.address, right_speed)\n            else:\n                self.rc.BackwardM2(self.address, right_speed)\n\n            self.loop_rate.sleep()\n\n        self.stop_motors()\n        pygame.quit()\n\n    def convert_speed(self, val):\n        \"\"\"\n        Convert [-1..+1] =&gt; (0..max_speed_cmd, direction).\n        \"\"\"\n        if val &gt;= 0:\n            return (int(val * self.max_speed_cmd), \"forward\")\n        else:\n            return (int(abs(val) * self.max_speed_cmd), \"backward\")\n\ndef main():\n    try:\n        node = XboxRoboclawDebugPy2()\n        node.run()\n    except rospy.ROSInterruptException:\n        pass\n    finally:\n        rospy.loginfo(\"Exiting python2 xbox teleop script.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></li> <li>Watch the map being built in RViz.</li> <li>Ensure the rover avoids obstacles and updates the map in real-time.</li> </ul>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#key-adjustments-made","title":"Key Adjustments Made","text":"<p>Here\u2019s a summary of the adjustments we made to configure Hector SLAM:</p> <ol> <li>Set Fixed Frame in RViz to <code>scanmatcher_frame</code>.</li> <li>Modified the Hector SLAM launch file to include:</li> <li><code>pub_map_odom_transform</code> set to <code>true</code>.</li> <li>Correct frame names (<code>map</code>, <code>odom</code>, <code>base_link</code>).</li> <li>Verified LIDAR publishing to <code>/scan</code> using <code>ld19.launch</code>.</li> <li>Ensured odometry data was published to <code>/odom</code> by the Roboclaw node.</li> </ol>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#troubleshooting","title":"Troubleshooting","text":"","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#error-transform-lookup-failed","title":"Error: Transform Lookup Failed","text":"<p>If you see errors like \"Lookup would require extrapolation into the future,\" check the following: - Ensure the system clocks are synchronized using <code>ntp</code> or <code>chrony</code>. - Verify all topics (<code>/scan</code>, <code>/odom</code>) have valid and synchronized timestamps.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#lidar-not-publishing","title":"LIDAR Not Publishing","text":"<p>Run: <pre><code>rostopic echo /scan\n</code></pre> If no data appears, ensure the LIDAR launch file is correctly configured and the sensor is operational.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/22/setting-up-hector-slam-with-ros-1-for-a-roboclaw-based-rover/#conclusion","title":"Conclusion","text":"<p>By following these steps, you\u2019ve successfully set up Hector SLAM on a Roboclaw-based ROS 1 rover. With LIDAR and odometry data, your rover can build a 2D map of its environment, enabling autonomous navigation and enhanced spatial awareness.</p> <p>Feel free to experiment with SLAM parameters and refine your rover\u2019s capabilities for your specific use case.</p>","tags":["ROS","Hector SLAM","Roboclaw","LIDAR","Autonomous Navigation","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/","title":"Setting Up and Running D500 LiDAR Kit's STL-19P on ROS 2 Jazzy","text":"<p>This guide walks you through setting up the D500 LiDAR Kit's STL-19P sensor for ROS 2 Jazzy, using the ldrobotSensorTeam/ldlidar_ros2 repository. By the end of this article, you'll be able to configure, launch, and visualize LIDAR data in ROS 2.</p>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have the following set up:</p> <ol> <li> <p>ROS 2 Jazzy Installed:    Follow the official instructions to install ROS 2 Jazzy.</p> </li> <li> <p>Set Up Your ROS 2 Workspace:    Create a workspace if you don't already have one:    <pre><code>mkdir -p ~/Desktop/frata_workspace/src\ncd ~/Desktop/frata_workspace\ncolcon build\nsource install/setup.bash\n</code></pre></p> </li> </ol>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#cloning-and-building-the-ldlidar-package","title":"Cloning and Building the LDLiDAR Package","text":"<ol> <li> <p>Clone the Repository:    <pre><code>cd ~/Desktop/frata_workspace/src\ngit clone https://github.com/ldrobotSensorTeam/ldlidar_ros2.git\n</code></pre></p> </li> <li> <p>Install Dependencies:    Use <code>rosdep</code> to install any missing dependencies:    <pre><code>cd ~/Desktop/frata_workspace\nrosdep install --from-paths src --ignore-src -r -y\n</code></pre></p> </li> <li> <p>Build the Workspace:    Compile the package:    <pre><code>colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> <li> <p>Source the Workspace:    Add the following to your <code>~/.bashrc</code> and source it:    <pre><code>echo \"source ~/Desktop/frata_workspace/install/local_setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> </li> </ol>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#running-the-ldlidar-node","title":"Running the LDLiDAR Node","text":"<ol> <li>Connect the LIDAR to a USB Port:</li> <li> <p>Ensure the LIDAR is connected to your machine. If the device isn't detected, try using a USB extension cable.</p> </li> <li> <p>Identify the Serial Port:    Check for the device's serial port:    <pre><code>ls /dev/ttyUSB*\n</code></pre>    Example output: <code>/dev/ttyUSB0</code>.</p> </li> <li> <p>Launch the Node:    Start the LDLiDAR node with the appropriate launch file:    <pre><code>ros2 launch ldlidar_ros2 ld19.launch.py\n</code></pre>    If required, modify the <code>port_name</code> in the <code>ld19.launch.py</code> file to match your detected port (e.g., <code>/dev/ttyUSB0</code>).</p> </li> <li> <p>View LIDAR Data:</p> </li> <li>Open Rviz2 to visualize the LIDAR data:      <pre><code>rviz2\n</code></pre></li> <li>Add a \"LaserScan\" display and set the topic to <code>/scan</code>.</li> </ol>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#troubleshooting-common-errors","title":"Troubleshooting Common Errors","text":"","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#1-communication-abnormal-error","title":"1. \"Communication Abnormal\" Error","text":"<p>If you encounter this error:    <pre><code>[ERROR] [ldlidar_publisher_ld19]: ldlidar communication is abnormal.\n</code></pre></p> <ul> <li> <p>Check Serial Port: Ensure the correct serial port (<code>/dev/ttyUSB0</code>) is specified in the launch file.</p> </li> <li> <p>Verify Baud Rate: Confirm that the baud rate in the launch file matches the LIDAR's configuration (default is <code>230400</code>).</p> </li> <li> <p>Reconnect the Device: Use a USB extension cable if the device isn't recognized properly.</p> </li> </ul>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#2-device-not-found","title":"2. Device Not Found","text":"<ul> <li>Run:      <pre><code>ls /dev/ttyUSB*\n</code></pre></li> <li>If no device appears, ensure the LIDAR is securely connected and powered.</li> </ul>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#3-no-data-in-rviz2","title":"3. No Data in Rviz2","text":"<ul> <li>Verify the <code>/scan</code> topic is being published:      <pre><code>ros2 topic list\nros2 topic echo /scan\n</code></pre></li> </ul>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#4-failed-init_port-fastrtps_port7000-error","title":"4. \"Failed init_port fastrtps_port7000\" Error","text":"<p>This is a common shared memory transport error in ROS 2.    - Solution: Add the following to your <code>.bashrc</code> to disable shared memory transport:      <pre><code>export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n</code></pre></p>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#example-launch-output","title":"Example Launch Output","text":"<p>Once everything is set up correctly, you should see the following output: <pre><code>[INFO] [ldlidar_publisher_ld19]: LDLiDAR SDK Pack Version is:3.3.1\n[INFO] [ldlidar_publisher_ld19]: ROS2 param input:\n[INFO] [ldlidar_publisher_ld19]: ldlidar serial connect is success\n[INFO] [ldlidar_publisher_ld19]: ldlidar communication is normal.\n[INFO] [ldlidar_publisher_ld19]: ldlidar driver start is success.\n[INFO] [ldlidar_publisher_ld19]: start normal, pub lidar data\n</code></pre></p>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-and-running-d500-lidar-kits-stl-19p-on-ros-2-jazzy/#conclusion","title":"Conclusion","text":"<p>With this guide, you can successfully set up and run the D500 LiDAR Kit's STL-19P  on ROS 2 Jazzy. If you encounter the \"communication abnormal\" or other errors, refer to the troubleshooting section to resolve them quickly. This setup enables seamless LIDAR integration for your autonomous robotics projects.</p> <p>For more information, visit the ldrobotSensorTeam GitHub repository.</p>","tags":["ROS 2","LIDAR","Autonomous Vehicles","Ubuntu"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/","title":"Setting Up the `roboclaw_ros` Node with ROS Noetic in Docker","text":"","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#introduction","title":"Introduction","text":"<p>In this guide, we\u2019ll walk through setting up the <code>roboclaw_ros</code> node in ROS Noetic using Docker. This approach ensures a clean, consistent environment for development and deployment while leveraging Docker's flexibility. We'll cover everything from creating the Docker image to running the node with the correct configurations.</p>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have:</p> <ol> <li>Docker Installed: Docker must be installed and operational on your system.  </li> <li>Hardware Setup:</li> <li>A Roboclaw motor controller connected to <code>/dev/ttyACM0</code>.  </li> <li>Encoders configured for your robot\u2019s specific dimensions.  </li> <li>Dependencies Installed:</li> <li>The <code>roboclaw_driver</code> library for ROS.  </li> <li>Python libraries like <code>pyserial</code> for communication.  </li> </ol>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#setup-steps","title":"Setup Steps","text":"","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#1-pull-the-base-docker-image","title":"1. Pull the Base Docker Image","text":"<p>Start by pulling the base Docker image for ROS Noetic:</p> <pre><code>sudo docker pull arm64v8/ros:noetic-ros-base\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#2-run-a-container-and-install-ros-noetic-components","title":"2. Run a Container and Install ROS Noetic Components","text":"<p>Launch a container from the base image:</p> <pre><code>sudo docker run -it --name ros_noetic_container --rm arm64v8/ros:noetic-ros-base\n</code></pre> <p>Inside the container, update and install required packages:</p> <pre><code>apt update\napt install -y ros-noetic-rosbridge-server ros-noetic-tf python3-serial python3-pip\npip3 install diagnostic-updater\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#3-create-and-mount-a-workspace","title":"3. Create and Mount a Workspace","text":"<p>To persist your workspace across sessions, create a workspace on your host machine and mount it in the container:</p> <pre><code>mkdir -p ~/ros_noetic_ws/src\nsudo docker run -it --name ros_noetic_container --rm -v ~/ros_noetic_ws:/root/ros_noetic_ws arm64v8/ros:noetic-ros-base\n</code></pre> <p>Inside the container, initialize the workspace:</p> <pre><code>cd /root/ros_noetic_ws\ncatkin_make\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#4-clone-the-roboclaw_ros-repository","title":"4. Clone the <code>roboclaw_ros</code> Repository","text":"<p>Clone the repository into the workspace:</p> <pre><code>cd /root/ros_noetic_ws/src\ngit clone https://github.com/DoanNguyenTrong/roboclaw_ros.git\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#5-build-the-workspace","title":"5. Build the Workspace","text":"<p>Return to the root of the workspace and build it:</p> <pre><code>cd /root/ros_noetic_ws\ncatkin_make\nsource devel/setup.bash\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#6-save-the-docker-image","title":"6. Save the Docker Image","text":"<p>To save your container for future use, commit it as a new image:</p> <pre><code>sudo docker commit ros_noetic_container ros_noetic_saved\n</code></pre> <p>Run this saved image with automatic restart enabled:</p> <pre><code>sudo docker run -it --name ros_noetic_container --restart always ros_noetic_saved\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#running-the-roboclaw_ros-node","title":"Running the <code>roboclaw_ros</code> Node","text":"<p>To run the <code>roboclaw_ros</code> node, use the following steps:</p>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#1-start-the-container","title":"1. Start the Container","text":"<p>Start the container with the saved image:</p> <pre><code>sudo docker start -ai ros_noetic_container\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#2-launch-the-node","title":"2. Launch the Node","text":"<p>Inside the container, run the launch file:</p> <pre><code>roslaunch roboclaw_node roboclaw.launch\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#testing-the-node","title":"Testing the Node","text":"<p>To verify the node's functionality:</p> <ol> <li>Publish Commands to <code>/cmd_vel</code>:</li> </ol> <pre><code>rostopic pub /cmd_vel geometry_msgs/Twist '{linear: {x: 0.5}, angular: {z: 0.1}}'\n</code></pre> <ol> <li>Monitor Output:</li> </ol> <p>Check odometry data on <code>/odom</code>:</p> <pre><code>rostopic echo /odom\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#viewing-docker-folder-structure","title":"Viewing Docker Folder Structure","text":"<p>To view the folder structure inside the container, use:</p> <pre><code>sudo docker exec -it ros_noetic_container bash\ncd /root/ros_noetic_ws\ntree\n</code></pre>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/23/setting-up-the-roboclaw_ros-node-with-ros-noetic-in-docker/#conclusion","title":"Conclusion","text":"<p>This guide provides a straightforward approach to setting up and running the <code>roboclaw_ros</code> node in a ROS Noetic Docker environment. Docker ensures consistency and portability, making it an ideal choice for robotics development. By following these steps, you can integrate Roboclaw into your robotic system efficiently.</p>","tags":["ROS","Docker","Roboclaw","ROS Noetic"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/","title":"Mastering Docker and ROS for Roboclaw With Key Tips and Workflows","text":"","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#introduction","title":"Introduction","text":"<p>Integrating Docker and ROS for robotics projects, especially with RoboClaw motor controllers, can seem daunting. This post streamlines critical steps, from saving Docker images to running ROS nodes with Xbox controller support, ensuring a smooth and efficient workflow.</p>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#key-topics-covered","title":"Key Topics Covered","text":"<ul> <li>Saving Docker containers for future use</li> <li>Opening new terminals in containers</li> <li>Running containers with Bluetooth and port access</li> <li>Setting up and using a ROS workspace in Docker</li> <li>Debugging common integration issues</li> </ul>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#1-saving-docker-containers","title":"1. Saving Docker Containers","text":"<p>Why Save Containers?</p> <ul> <li>Prevents loss of your setup if the container is stopped or deleted.</li> <li>Allows easy re-creation of environments.</li> </ul> <p>Steps:</p> <ol> <li>Stop the container:    <pre><code>sudo docker stop &lt;container_name&gt;\n</code></pre></li> <li>Commit the container as an image:    <pre><code>sudo docker commit &lt;container_id&gt; &lt;new_image_name&gt;\n</code></pre></li> <li>Verify the image:    <pre><code>sudo docker images\n</code></pre></li> </ol> <p>Example: <pre><code>sudo docker commit 96a9ad78d1e6 ros_noetic_with_rviz\n</code></pre></p>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#2-opening-a-new-terminal-in-a-running-container","title":"2. Opening a New Terminal in a Running Container","text":"<p>Why Do This?</p> <ul> <li>Manage multiple ROS nodes or debug processes.</li> </ul> <p>Steps:</p> <ol> <li>List running containers:    <pre><code>sudo docker ps\n</code></pre></li> <li>Attach a terminal to the container:    <pre><code>sudo docker exec -it &lt;container_name&gt; /bin/bash\n</code></pre></li> </ol> <p>Example: <pre><code>sudo docker exec -it ros_rviz_container /bin/bash\n</code></pre></p>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#3-running-containers-with-bluetooth-and-port-access","title":"3. Running Containers with Bluetooth and Port Access","text":"<p>Why Use These Flags?</p> <ul> <li><code>--net=host</code>: Enables seamless network communication.</li> <li><code>--privileged</code>: Grants full access to host devices.</li> <li><code>--device</code>: Connects peripherals like an Xbox controller.</li> <li><code>-v</code>: Mounts necessary directories for GUI and Bluetooth.</li> </ul> <p>Command Example: <pre><code>sudo docker run -it --name roboclaw_v02 \\\n    --net=host \\\n    --privileged \\\n    --device=/dev/input/js0:/dev/input/js0 \\\n    --device=/dev/input/event0:/dev/input/event0 \\\n    -v /var/run/dbus:/var/run/dbus \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=$DISPLAY \\\n    roboclaw_v02\n</code></pre></p>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#4-setting-up-a-ros-workspace-in-docker","title":"4. Setting Up a ROS Workspace in Docker","text":"<p>Steps:</p> <ol> <li>Mount the workspace:    <pre><code>sudo docker run -it --name &lt;container_name&gt; \\\n    -v ~/ros_noetic_ws:/root/ros_noetic_ws \\\n    &lt;base_image&gt;\n</code></pre></li> <li>Inside the container:    <pre><code>cd ~/ros_noetic_ws\ncatkin_make\nsource devel/setup.bash\n</code></pre></li> </ol>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#5-running-ros-nodes-and-debugging","title":"5. Running ROS Nodes and Debugging","text":"","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#starting-roscore","title":"Starting roscore:","text":"<ol> <li>Attach a terminal to the container:    <pre><code>sudo docker exec -it &lt;container_name&gt; /bin/bash\n</code></pre></li> <li>Run roscore:    <pre><code>roscore\n</code></pre></li> </ol>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#running-a-ros-node","title":"Running a ROS Node:","text":"<ol> <li>Source the workspace:    <pre><code>source ~/ros_noetic_ws/devel/setup.bash\n</code></pre></li> <li>Run the node:    <pre><code>rosrun roboclaw_node xbox_teleop_odom.py\n</code></pre></li> </ol>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#6-debugging-common-issues","title":"6. Debugging Common Issues","text":"","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#problem-master-not-found","title":"Problem: \"Master Not Found\"","text":"<ul> <li>Ensure roscore is running in the same container.</li> </ul>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#problem-device-not-found","title":"Problem: Device Not Found","text":"<ul> <li>Check device mapping:    <pre><code>ls /dev/input/js0\n</code></pre></li> </ul>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#problem-missing-ros_package_path","title":"Problem: Missing ROS_PACKAGE_PATH","text":"<ul> <li>Add the workspace to <code>ROS_PACKAGE_PATH</code>:    <pre><code>export ROS_PACKAGE_PATH=/root/ros_noetic_ws/src:$ROS_PACKAGE_PATH\n</code></pre></li> </ul>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/26/mastering-docker-and-ros-for-roboclaw-with-key-tips-and-workflows/#conclusion","title":"Conclusion","text":"<p>By following these practices, you can efficiently develop robotics applications using Docker and ROS. This workflow allows for robust integration of peripherals, such as Xbox controllers, and ensures smooth communication between ROS nodes. </p> <p>Stay innovative and focus on building your robotics vision without being bogged down by setup hurdles!</p> <p>Happy Robotics! \ud83d\ude80</p>","tags":["ROS","Docker","Roboclaw","ROS Noetic","ROS Jazzy"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/","title":"Efficient Docker Management for Robotics","text":"","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#introduction","title":"Introduction","text":"<p>Docker is an essential tool for robotics development, offering quick prototyping, environment isolation, and streamlined deployment. However, managing containers effectively\u2014especially with ROS (Robot Operating System)\u2014can be complex. This guide highlights best practices for saving Docker images, removing unused resources, enabling GUI and Bluetooth in containers, and ensuring seamless ROS integration for robotics projects.</p>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#key-topics-covered","title":"Key Topics Covered","text":"<ul> <li>Saving and tagging Docker images for reproducibility  </li> <li>Cleaning up unused images and resources  </li> <li>Running Docker containers with GUI and peripheral support  </li> <li>Setting up ROS workspaces inside containers  </li> <li>Debugging common integration issues  </li> </ul>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#1-saving-docker-containers-as-images","title":"1. Saving Docker Containers as Images","text":"<p>Why Save Docker Containers?</p> <ul> <li>Preserve your work after container modifications.  </li> <li>Quickly replicate development environments for prototyping or deployment.  </li> </ul> <p>Steps to Save an Image:</p> <ol> <li> <p>Stop the container:    <pre><code>sudo docker stop &lt;container_name&gt;\n</code></pre></p> </li> <li> <p>Commit the container to an image:    <pre><code>sudo docker commit &lt;container_id&gt; &lt;new_image_name&gt;\n</code></pre></p> </li> <li> <p>Verify the saved image:    <pre><code>sudo docker images\n</code></pre></p> </li> </ol> <p>Example: <pre><code>sudo docker commit 96a9ad78d1e6 roboclaw_v02\n</code></pre></p>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#2-removing-unused-images-and-containers","title":"2. Removing Unused Images and Containers","text":"<p>Why Clean Up?</p> <ul> <li>Free up disk space.  </li> <li>Reduce clutter from unused or dangling images.  </li> </ul> <p>Commands:</p> <ol> <li> <p>List dangling images:    <pre><code>sudo docker images -f dangling=true\n</code></pre></p> </li> <li> <p>Remove dangling images:    <pre><code>sudo docker image prune -f\n</code></pre></p> </li> <li> <p>Remove specific images:    <pre><code>sudo docker rmi &lt;image_id&gt;\n</code></pre></p> </li> <li> <p>Remove stopped containers:    <pre><code>sudo docker container prune\n</code></pre></p> </li> </ol>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#3-running-containers-with-gui-and-peripheral-support","title":"3. Running Containers with GUI and Peripheral Support","text":"<p>Why Enable GUI and Peripherals?</p> <p>Robotics projects often require visualization tools like RViz and peripheral support for devices such as Xbox controllers or Bluetooth sensors. Docker flags ensure seamless integration.</p> <p>Command Example: <pre><code>sudo docker run -it --name roboclaw_v02 \\\n    --net=host \\\n    --privileged \\\n    --device=/dev/input/js0:/dev/input/js0 \\\n    --device=/dev/input/event0:/dev/input/event0 \\\n    -v /var/run/dbus:/var/run/dbus \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=$DISPLAY \\\n    roboclaw_v02\n</code></pre></p> <p>Explanation of Flags:</p> <ul> <li><code>--net=host</code>: Enables network communication between container and host.  </li> <li><code>--privileged</code>: Grants access to host devices (e.g., Bluetooth).  </li> <li><code>--device</code>: Maps input devices for peripherals like controllers.  </li> <li><code>-v</code>: Mounts directories for GUI and device access.  </li> </ul>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#4-setting-up-a-ros-workspace-in-docker","title":"4. Setting Up a ROS Workspace in Docker","text":"<p>Why Use a Mounted Workspace?</p> <ul> <li>Edit code on the host machine while executing it inside the container.  </li> <li>Persist changes across container restarts.  </li> </ul> <p>Steps:</p> <ol> <li> <p>Run the container with a mounted workspace:    <pre><code>sudo docker run -it --name &lt;container_name&gt; \\\n    -v ~/ros_ws:/root/ros_ws \\\n    &lt;base_image&gt;\n</code></pre></p> </li> <li> <p>Inside the container, initialize the ROS workspace:    <pre><code>cd ~/ros_ws\ncatkin_make\nsource devel/setup.bash\n</code></pre></p> </li> </ol>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#5-running-ros-nodes-and-debugging","title":"5. Running ROS Nodes and Debugging","text":"","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#starting-roscore","title":"Starting <code>roscore</code>:","text":"<ol> <li> <p>Attach to the container:    <pre><code>sudo docker exec -it &lt;container_name&gt; /bin/bash\n</code></pre></p> </li> <li> <p>Start <code>roscore</code>:    <pre><code>roscore\n</code></pre></p> </li> </ol>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#running-ros-nodes","title":"Running ROS Nodes:","text":"<ol> <li> <p>Source the workspace:    <pre><code>source ~/ros_ws/devel/setup.bash\n</code></pre></p> </li> <li> <p>Run the node:    <pre><code>rosrun roboclaw_node xbox_teleop_odom.py\n</code></pre></p> </li> </ol>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#6-debugging-common-issues","title":"6. Debugging Common Issues","text":"","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#issue-master-not-found","title":"Issue: \"Master Not Found\"","text":"<ul> <li>Ensure <code>roscore</code> is running in the same container.</li> </ul>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#issue-device-not-found","title":"Issue: \"Device Not Found\"","text":"<ul> <li>Verify input device mapping:    <pre><code>ls /dev/input/js0\n</code></pre></li> </ul>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#issue-ros_package_path-missing","title":"Issue: \"ROS_PACKAGE_PATH Missing\"","text":"<ul> <li>Set the workspace path:    <pre><code>export ROS_PACKAGE_PATH=/root/ros_ws/src:$ROS_PACKAGE_PATH\n</code></pre></li> </ul>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/2025/01/27/efficient-docker-management-for-robotics/#conclusion","title":"Conclusion","text":"<p>By mastering these Docker and ROS workflows, you can create efficient and portable robotics development environments. Whether it\u2019s saving images, enabling peripherals, or debugging nodes, these practices ensure a robust foundation for prototyping and deployment.  </p> <p>Stay innovative, and build the future of robotics with confidence! \ud83d\ude80</p>","tags":["Docker","ROS","Robotics","Quick Prototyping","ROS Noetic","Docker Management"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/robotics/","title":"Robotics","text":""},{"location":"blog/category/programming/","title":"Programming","text":""},{"location":"blog/category/cloud-computing/","title":"Cloud Computing","text":""},{"location":"blog/category/machine-learning/","title":"Machine Learning","text":""},{"location":"blog/category/art/","title":"Art","text":""},{"location":"blog/category/gaming/","title":"Gaming","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/archive/2025/page/2/","title":"2025","text":""}]}